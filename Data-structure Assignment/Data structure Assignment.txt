
// NAMES : Wanjau Mwangi & Dennis Kariuki
// REGISTRATION : SCT221-0500/2022 & SCT221-O497/2022
#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;


Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


int findIndex(int arr[], int start, int end, int value) {
    for (int i = start; i <= end; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}


Node* bst_construct(int inOrder[], int postOrder[], int inStart, int inEnd, int* postIndex) {
    if (inStart > inEnd) {
        return NULL;
    }

    Node* root = createNode(postOrder[(*postIndex)--]);

    if (inStart == inEnd) {
        return root;
    }

    int inIndex = findIndex(inOrder, inStart, inEnd, root->data);

    root->right = bst_construct(inOrder, postOrder, inIndex + 1, inEnd, postIndex);
    root->left = bst_construct(inOrder, postOrder, inStart, inIndex - 1, postIndex);

    return root;
}


void traverseBFS(Node* root) {
    if (root == NULL) {
        return;
    }

    Node* queue[100];
    int front = 0, rear = 0;
    queue[rear++] = root;

    while (front < rear) {
        Node* current = queue[front++];
        printf("%d ", current->data);

        if (current->left != NULL) {
            queue[rear++] = current->left;
        }
        if (current->right != NULL) {
            queue[rear++] = current->right;
        }
    }
}

int main() {
    int inOrder[] = {5, 10, 15, 20, 25, 30, 45};
    int postOrder[] = {5, 15, 10, 25, 45, 30, 20};
    int n = sizeof(inOrder) / sizeof(inOrder[0]);
    int postIndex = n - 1;

    Node* root = bst_construct(inOrder, postOrder, 0, n - 1, &postIndex);

    printf("Breadth-First Search Traversal of the Binary Search Tree:\n");
    traverseBFS(root);

    return 0;
}
